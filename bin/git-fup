#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-smart#ðŸ’¡
# License: MIT. Please find more in the LICENSE file.

# Creates a fixup commit and then rebases it where it needs to be.
#
# Assuming you've added the files you want fixed-up, e.g.,
#
#   git add {some-changes}
#
# Then running `git fup {commit}` is similar to the following steps:
#
#   git commit --no-verify --fixup={commit}
#   git add -A && git ci -m WIP
#   git rebase -i --autosquash {commit}^
#   # Save the file
#   git pop1  # Undo the WIP.

# USAGE: git fup {commit}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

GITSMART_GIT_FUP_WIP_COMMIT_MESSAGE="${PRIVATE_PREFIX:-PRIVATE: }WIP [git-fup]"

# This is the known Git rebase todo path.
# - SPIKE: Can we get this from `git` so it's not hardcoded?
GIT_REBASE_TODO_PATH=".git/rebase-merge/git-rebase-todo"

# This is the special tag at the end of the 'exec' line that
# you must use if you git-abort to run that 'exec'.
# - USYNC: This environ is used in git-smart and tig-newtons:
GITSMART_POST_REBASE_EXECS_TAG=" #git-abort"

git_fixup_and_rebase () {
  local commit="$1"

  if [ -z "${commit}" ]; then
    >&2 echo "ERROR: Please specify a commit"

    exit 1
  fi

  # We can run the `git` commands we need from anywhere within the project,
  # but change to the root directory just to be safe (this is from a
  # reverted "feature" that called `git --no-pager diff --name-only`,
  # which returns paths relative to root, so best run from root).
  git_root () {
    git rev-parse --show-toplevel
  }

  cd "$(git_root)"

  git commit -q --no-verify --fixup ${commit}

  local pop_after=false
  ! maybe_commit_uncommitted || pop_after=true

  # Have the interactive rebase sequence editor complete automatically
  # by specifying the Bash `:` no-op.
  # See:
  #   https://stackoverflow.com/questions/29094595/
  #     git-interactive-rebase-without-opening-the-editor

  local rebase_failed=false

  # Aka `git ria ${commit}^`
  #  echo "GIT_SEQUENCE_EDITOR=: git rebase -i --autosquash ${commit}^"
  if ! GIT_SEQUENCE_EDITOR=: git rebase -i --autosquash ${commit}^; then
    # MEH: We could wait for user to resolve conflicts (like git-put-wise
    # does (see: must_await_user_resolve_conflicts)). But all user has to
    # do to clean up is pop the WIP commit. So unless that's too annoying,
    # we'll just remind user about the WIP commit; otherwise we can take
    # the time to add code to prompt-loop until .git/REBASE_HEAD gone.
    print_error_rebase_failed_shared

    rebase_failed=true
  fi

  if ${rebase_failed}; then
    # This feels a little... backhanded. Or maybe just sneaky.
    #
    # Append rebase-todo with 'exec' cleanup commands:
    # - Pop the WIP, if we used one (with `git reset -q --mixed @~1`).
    # - Restage the fixup! (with `git reset --soft @~1`, aka `git undo`).
    #   - This restages the intermediate commit the `--fixup` created,
    #     titled like "fixup! <target commit message>". So the user
    #     can now endlessly loop git-fup, git-abort, git-fup, etc.
    # - Also sleep first and background `&` the 'exec', so that
    #   git-rebase does not see uncommitted changes (otherwise it
    #   thinks the rebase failed).
    # - Finally, the #git-abort tag tells git-abort to run the execs
    #   if the user aborts the rebase instead of finishing it.
    # (At this point, it feels like we should just use a sequence editor
    #  and write the initial todo ourselves. But there's also nothing that
    #  says we shouldn't do it this way, and it works. Just hopping on the
    #  party train a little late.)

    if [ -n "${GIT_POST_REBASE_EXEC}" ]; then
      echo "exec ${GIT_POST_REBASE_EXEC} ${GITSMART_POST_REBASE_EXECS_TAG}" \
        >> "${GIT_REBASE_TODO_PATH}"
    fi

    local todo_exec="sleep 0.1"

    if ${pop_after}; then
      # Pop the WIP commit.
      todo_exec="${todo_exec} && git reset -q --mixed @~1"
    fi

    # Restage the "fixup!" commit.
    todo_exec="${todo_exec} && git reset --soft @~1"

    echo "exec ${todo_exec} & ${GITSMART_POST_REBASE_EXECS_TAG}" \
      >> "${GIT_REBASE_TODO_PATH}"
  elif ${pop_after}; then
    # Rebase succeeded without user intervention. We are clear to
    # pop the WIP commit... but we'll slide in an unnecessary and
    # unnecessarily complex state check first just to be paranoid.
    double_triple_quadruple_check_rebase_complete \
      || exit 1

    # Run any post-rebase user hooks.
    if [ -n "${GIT_POST_REBASE_EXEC}" ]; then
      eval ${GIT_POST_REBASE_EXEC}
    fi

    # Aka `git pop1 --quiet`.
    git reset -q --mixed @~1
  fi
}

# ***

maybe_commit_uncommitted () {
  local pop_after=false

  if [ -n "$(git_status_porcelain)" ]; then
    # Untracked, Unstaged, or Staged changes not committed.
    pop_after=true

    # Aka `git wip`
    git add -A
    git commit -q --no-verify -m "${GITSMART_GIT_FUP_WIP_COMMIT_MESSAGE}"
  fi

  ${pop_after}
}

# ***

print_error_rebase_failed_shared () {
  >&2 echo
  >&2 echo "ERROR: The git-fup rebase failed."
  >&2 echo "- Hint: Resolve conflicts and run \`git rc\`" \
    "(or \`git rebase --continue\`)"
  >&2 echo "        Or, give up using \`git abort\`" \
    "(a fancy \`git rebase --abort\`"
  >&2 echo "        that restages your changes)"
}

# ***

# - AFAIK, .git/REBASE_HEAD exists until the rebase is complete.
# - We can also to check if the repo is tidy. If it's not tidy,
#   we can assume the rebase failed.
# - While we're at it -- or just being unnecessarily paranoid --
#   verify that the latest commit has the "WIP" message we used.
double_triple_quadruple_check_rebase_complete () {
  local rebase_complete=true

  # MAYBE/2023-01-15: Take page from git-put-wise playbook and
  # wait for user to resolve rebase conflicts, so we can pop the
  # wip commit. / But that's only reason to offer to run to
  # completion, so really a big deal if we don't add such a
  # mechanism.
  if [ -f ".git/REBASE_HEAD" ]; then
    # 2023-01-16: I squashed @^ in @^^ via my new tig <C-r> command,
    # and tig command said failed because .git/REBASE_HEAD exists,
    # but rebase clearly-obviously completed, so looks like (via the
    # empherical evidence) that Git won't always cleanup .git/REBASE_HEAD.
    echo
    # LATER/2023-01-16: Revisit and remove this if-block (confirm that
    # you start seeing this error sometimes).
    echo "ERROR?: .git/REBASE_HEAD still exists [but does it matter?]"
    #echo "- This is likely a DEV error, so please take it from here."

    # rebase_complete=false
  fi

  if [ -f "${GIT_REBASE_TODO_PATH}" ]; then
    # 2023-01-16: This is the file the definitely should not exist if
    # the rebase was sucessful.
    echo
    echo "ERROR: ${GIT_REBASE_TODO_PATH} still exists"
    echo "- This is likely a DEV error, so please take it from here."

    rebase_complete=false
  fi

  if [ -n "$(git_status_porcelain)" ]; then
    echo
    echo "ERROR: There was an unexpected error:"
    echo "- Git status reports the project is not tidy,"
    echo "  but we didn't detect a .git/REBASE_HEAD file."
    echo "- This is likely a DEV error, so please take it from here."

    rebase_complete=false
  fi

  if [ "$(git_latest_commit_message)" != "${GITSMART_GIT_FUP_WIP_COMMIT_MESSAGE}" ]; then
    echo
    echo "ERROR: There was an unexpected error:"
    echo "- The latest commit is not the \"WIP\" we made."
    echo "- This is likely a DEV error, so please take it from here."

    rebase_complete=false
  fi

  ${rebase_complete}
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

git_status_porcelain () {
  git status --porcelain=v1
}

git_latest_commit_message () {
  git --no-pager log -1 --pretty=%B
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  set -e

  git_fixup_and_rebase "$@"
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "${@}"
fi

