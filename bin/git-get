#!/bin/sh
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-smart#ðŸ’¡
# License: MIT. Please find more in the LICENSE file.

# Like `git fetch --all`, but fetches workflow-named remotes first (e.g.,
# 'proving', then 'release'), and skips user-specified remotes (e.g., to
# USB devices or remote hosts that are offline or not important).

GITSMART_MYST_REMOTE_HIERARCHY="${GITSMART_MYST_REMOTE_HIERARCHY:-proving release starter myclone origin upstream}"

# YOU: Set this variable from your private Bashrc.
# E.g., list remotes to private backup media.
GITSMART_GET_SKIP_REMOTES="${GITSMART_GET_SKIP_REMOTES}"

fetch_known_remotes_orderly () {
  for remote in ${GITSMART_MYST_REMOTE_HIERARCHY}; do
    if git remote get-url ${remote} > /dev/null 2>&1; then
      echo "Fetching â€˜${remote}â€™"
      git fetch ${remote}
    fi
  done
}

fetch_remote_allowed () {
  local cur_re="$1"
  local remote
  for remote in ${GITSMART_GET_SKIP_REMOTES}; do
    [ "${cur_re}" = "${remote}" ] && return 1
  done
  for remote in ${GITSMART_MYST_REMOTE_HIERARCHY}; do
    # Return false, because fetch_known_remotes_orderly already fetched.
    [ "${cur_re}" = "${remote}" ] && return 1
  done
  return 0
}

fetch_other_remotes_allowed () {
  local remote
  for remote in $(git remote | sort); do
    fetch_remote_allowed "${remote}" || continue
    echo "Fetching â€˜${remote}â€™"
    git fetch ${remote}
  done
}

git_get () {
  fetch_known_remotes_orderly
  fetch_other_remotes_allowed
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  git_get
}

# Run the function if being executed. Do nothing if sourced.
if ! $(printf %s "$0" | grep -q -E '(^-?|\/)(ba|da|fi|z)?sh$' -); then
  main "${@}"
fi

