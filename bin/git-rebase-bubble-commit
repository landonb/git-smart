#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-smart#ðŸ’¡
# License: MIT. Please find more in the LICENSE file.

# USAGE: Call with a commit message snippet to bubble the matching commit
#        to be the latest commit.
#
#        Wire to an alias specific to your workflow.
#
#        E.g., suppose you commit a changlog with the commit title
#        "Update History", and you want that commit to be the most
#        recent commit when you make a release, so you bubble that
#        commit before tagging (and then possibly `commit --amend`
#        additional details). You could auto-bubble that commit up
#        using this command with the following alias. Then when you
#        want to bring the most recent changlog "Update History"
#        commit to be the HEAD commit, call `git bubble-history`.
#
#           git config --add alias.bubble-history "rebase-bubble-commit 'Update History'"

# NOTE: Beware quotes in ~/.gitconfig, lest string arguments with whitespace
#       get separated, e.g.,
#
#         $ cat ~/.gitconfig
#         [alias]
#           bubble-history = rebase-bubble-commit "Update History"
#
#         $ head -2 git-rebase-bubble-commit
#         #!/bin/sh
#         echo "$1 / ${@}"
#
#         $ git bubble-history
#         Update / Update History
#
#       You can work-around with extra quotes, e.g.,
#
#         $ cat ~/.gitconfig
#         [alias]
#           bubble-history = rebase-bubble-commit '"Update History"'
#
#         $ git bubble-history
#         Update History / Update History

DTRACE=false
# DEV/YOU: Uncomment to spit trace to stderr.
#  DTRACE=true

# ***

git-rebase-bubble-commit () {
  # See note at start of script: Ensure you've quoted the string properly!
  # FIXME/2020-01-30: Any reason to `shift 1` and send `${@}` to git-rebase?
  #   local matchstr="$1"
  # - Unless we want to pass-through args to git-rebase, no reason not to gobble all...
  #   unless behavior changes later and then user's git behaves unexpectedly differently.
  local find_ci_msg="$@"

  must_specify_match_message "${find_ci_msg}"

  # Find the target commit to bubble up.
  local ci_target
  ci_target="$(must_find_matching_commit "${find_ci_msg}")"

  # Ensure the user is not rewriting history of other branches.
  #
  # There are 2 basic approaches, 1 more robust than the other.
  #
  # - The less robust method is to see if the commit is in a particular
  #   branch, e.g., we could see if the commit exists in 'release' thusly:
  #
  #     $ git merge-base --is-ancestor ${ci_target} release && echo Yup || echo Nop
  #
  # - The more robust method is to get a list of all known branches that
  #   contain the commit in question, and to just count that list (because
  #   we can assume the current branch is one of those listed, so just check
  #   that the count is exactly 1).
  ensure_commit_unique_to_this_branch "${ci_target}"

  # Find the commit before the one being bubbled, to send to rebase.
  local ci_before
  ci_before="$(must_find_previous_commit "${ci_target}")"

  # Once we've made it this far, we're confident the operation will be
  # valid and permissible!
  git_rebase_buble_commit_noninteractive "${ci_before}"
}

# ***

must_specify_match_message () {
  local matchstr="$1"
  [ -n "${matchstr}" ] && return
  >&2 echo "ERROR: No commit message search specified!"
  exit 1
}

must_find_matching_commit () {
  local matchstr="$1"
  ${DTRACE} && >&2 echo "git --no-pager log -1 --pretty=format:\"%H\" --grep \"${matchstr}\""
  ci_target=$(git --no-pager log -1 --pretty=format:"%H" --grep "${matchstr}")
  if [ -z "${ci_target}" ]; then
    >&2 echo "ERROR: No commit found with message matching â€˜${matchstr}â€™."
    exit 1
  fi
  echo "${ci_target}"
}

must_find_previous_commit () {
  local ci_target="$1"
  ${DTRACE} && >&2 echo "git --no-pager log -1 --pretty=format:\"%H\" --grep \"${ci_target}^1\""
  ci_before=$(git --no-pager log -1 --pretty=format:"%H" ${ci_target}^1)
  if [ -z "${ci_before}" ]; then
    >&2 echo "ERROR: No commit found *before* matching commit â€˜${ci_target}â€™."
    exit 1
  fi
  echo "${ci_before}"
}

ensure_commit_unique_to_this_branch () {
  local ci_target="$1"
  local br_count
  ${DTRACE} && >&2 echo "git --no-pager branch --contains \"${ci_target} | wc -l\""
  br_count=$(git --no-pager branch --contains ${ci_target} | wc -l)
  if [ ${br_count} -ne 1 ]; then
    >&2 echo "ERROR: Refuse to bubble commit that is merged elsewhere!"
    >&2 git --no-pager branch --contains ${ci_target}
    exit 1
  fi
}

git_rebase_buble_commit_noninteractive () {
  local ci_before="$1"

  local seditor="git-rebase-bubble-oldest"
  if ! command -v "${seditor}" > /dev/null; then
    seditor="${GITSMART_BIN:-${HOME}/.local/bin}/${seditor}"
    if [ ! -e "${seditor}" ]; then
      >&2 echo "ERROR: Cannot locate: git-rebase-bubble-oldest"
      exit 1
    fi
  fi

  ${DTRACE} && >&2 echo "Pivot: git rebase -i ${ci_before}"
  GIT_SEQUENCE_EDITOR="${seditor}" \
    git rebase -i ${ci_before}
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  git-rebase-bubble-commit "$@"
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "$@"
fi

