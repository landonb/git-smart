#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-smart#💡
# License: MIT. Please find more in the LICENSE file.

# USAGE: git reword {commit}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# COPYD: See git_edit_revision command in tig-newtons
#   https://github.com/DepoXy/tig-newtons#🍎
# If using DepoXy, it's at ~/.kit/git/tig-newtons/tig/config
#   meld ~/.kit/git/git-smart/bin/git-edit ~/.kit/git/tig-newtons/tig/bind-rebase &
#
# Note the `exec` appended to the .git/git-rebase-todo, which
# pops the stashed WIP commit after the user finishes rebase.
# - We `&` background the operation so that git-rebase does
#   not see uncommitted changes, otherwise it'll think the
#   rebase failed:
#
#     $ git rc
#     Executing: true && git reset --mixed @~1
#     Unstaged changes after reset:
#     M	some/file
#     M	another/f
#     error: cannot rebase: You have unstaged changes.
#     warning: execution succeeded: true && git reset --mixed @~1
#     but left changes to the index and/or the working tree
#     Commit or stash your changes, and then run
#
#       git rebase --continue
#
#   - Note also the short sleep, though it works without in practice,
#     but there's a race condition with the Git tidy work tree check:
#
#       https://github.com/git/git/blob/5bc069e383539824fd3a0d897100d44bbe1f8a24/sequencer.c#L3620
#
git_edit_revision () {
  local commit="$1"

  set -e

  local wipped=false

  git add -A \
    && git commit --no-verify -m 'PRIVATE: WIP [git-edit]' > /dev/null

  GIT_SEQUENCE_EDITOR='f () { \
    local rebase_todo_path="$1"
    sed -i "1 s/^pick/edit/" "${rebase_todo_path}"
    echo "exec '${wipped}' && sleep 0.1 && git reset -q --mixed @~1 &" \
      >> "${rebase_todo_path}"
  }; f "$1"' git rebase -i "${commit}"^
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  git_edit_revision "$@"
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "${@}"
fi

