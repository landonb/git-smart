#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-smart#ðŸ’¡
# License: MIT. Please find more in the LICENSE file.

# USAGE: git report-large-blobs

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# Courtesy:
#   https://stackoverflow.com/a/10622293
# From:
#   https://stackoverflow.com/questions/10622179/how-to-find-identify-large-commits-in-git-history

# Remainder is copied from QA answer.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# Shows you the largest objects in your repo's pack file.
# Written for osx.
#
# @see https://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/
# @author Antony Stubbs

# set -x 

git_report_large_blobs () {
  # set the internal field separator to line break, so that
  # we can iterate easily over the verify-pack output
  IFS=$'\n';
 
  # list all objects including their size, sort by size, take top 10
  objects=`git verify-pack -v .git/objects/pack/pack-*.idx | grep -v chain | sort -k3nr | head`
 
  echo "All sizes are in kB's. The pack column is the size of the object, compressed, inside the pack file."
 
  output="size,pack,SHA,location"

  allObjects=`git rev-list --all --objects`

  for y in $objects; do
    # extract the size in bytes
    size=$((`echo $y | cut -f 5 -d ' '`/1024))
    # extract the compressed size in bytes
    compressedSize=$((`echo $y | cut -f 6 -d ' '`/1024))
    # extract the SHA
    sha=`echo $y | cut -f 1 -d ' '`
    # find the objects location in the repository tree
    other=`echo "${allObjects}" | grep $sha`
    #lineBreak=`echo -e "\n"`
    output="${output}\n${size},${compressedSize},${other}"
  done
   
  echo -e $output | column -t -s ', '
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  git_report_large_blobs "$@"
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "${@}"
fi

