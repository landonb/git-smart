#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-smart#üí°
# License: MIT. Please find more in the LICENSE file.

reveal_biz_vars () {
  # Left-align with 5 spaces between name and URL:
  #  GITSMART_COLSEP="${GITSMART_COLSEP:-     }"
  #  GITSMART_ALIGNT="${GITSMART_ALIGNT:--}"
  # But I sorta like right-align with just 2 spaces:
  GITSMART_COLSEP="${GITSMART_COLSEP:-  }"
  GITSMART_ALIGNT="${GITSMART_ALIGNT:-}"

  # YOU: Leave at zero to use max width of single repo's remotes;
  #      or set to minimum width for all projects -- i.e., for `mr`
  #      multiple-repository reporting, you could run, e.g.,:
  #        mr -d / run bash -c 'GITSMART_MAX_WIDTH=12 git re'
  GITSMART_MAX_WIDTH=${GITSMART_MAX_WIDTH:-0}
}

# ***

# TOO_BASHY for macOS system Bash:
#  declare -A -x GITSMART_REMOTE_CACHE__

_gs_set_remote_cache () {
  local name="$1"
  local url="$2"

  # >&2 echo eval "GITSMART_REMOTE_CACHE__${name}='${url}'"

  # TOO_BASHY:
  #  GITSMART_REMOTE_CACHE[${name}]="${url}"
  eval "GITSMART_REMOTE_CACHE__${name}='${url}'"
}

_gs_get_remote_cache () {
  local name="$1"

  # >&2 echo eval echo '$'GITSMART_REMOTE_CACHE__${name} == \
  #   $(eval echo '$'GITSMART_REMOTE_CACHE__${name})

  # TOO_BASHY:
  #  echo "${GITSMART_REMOTE_CACHE[${name}]}"
  eval echo '$'GITSMART_REMOTE_CACHE__${name}
}

_gs_has_remote_cache () {
  local name="$1"

  # >&2 echo [ -v "GITSMART_REMOTE_CACHE__${name}" ] == \
  #   $([ -v "GITSMART_REMOTE_CACHE__${name}" ] && echo true || echo false)

  # TOO_BASHY:
  #  [ ${GITSMART_REMOTE_CACHE[${name}]+x} ] && true || false
  eval [ ! -z '$'{GITSMART_REMOTE_CACHE__${name}+x} ] && true || false
}

# ***

update_first_column_max () {
  local name=$1
  local name_len=$(printf %s "${name}" | wc --chars)

  [ ${name_len} -gt ${GITSMART_MAX_WIDTH} ] && GITSMART_MAX_WIDTH=${name_len}
}

git_remote_assemble_cache () {
  local last_op=''
  local last_url=''
  local line=''

  while IFS= read -r line; do
    # 3 parts: name; url; "(fetch)" or "(push)".
    set -- ${line}
    local name=$1
    local url=$2
    local op=$3

    if [ "${op}" = "(fetch)" ]; then
      [ -n "${last_op}" ] && [ "${last_op}" != "(push)" ] && \
        >&2 "Unexpected: Previous line's op not ‚Äú(push)‚Äù."
      last_op="${op}"
      last_url="${url}"
      update_first_column_max "${name}"
      _gs_set_remote_cache "${name}" "${url}"
    elif [ "${op}" = "(push)" ]; then
      # (lb): It's probably possible to have other ops, or disparate
      # URLs for the same remote, but I've never seen it in my usage,
      # so alerting.
      [ -n "${last_op}" ] && [ "${last_op}" != "(fetch)" ] && \
        >&2 "Unexpected: Previous line's op not ‚Äú(fetch)‚Äù."
      [ -n "${last_url}" ] && [ "${last_url}" != "${url}" ] && \
        >&2 "Unexpected: Previous line's url not the same."
      last_op="${op}"
      last_url="${url}"
      # Only call the callback once, once first line for remote,
      # which is the "(fetch)" line, handled above.
    else
      >&2 "Unexpected: Unknown op ‚Äú${op}‚Äù for ‚Äú${name}‚Äù."
    fi
  done < <(git remote -v)
  # CURIOUS/2020-03-11: What's difference between these two:
  #   done < <(git remote -v)
  #   done <<< "$(git remote -v)"
}

# Prints the remote name and URL, right-aligning each remote name in a column.
callback_print_remote_info () {
  local remote="$1"
  local url="$2"

  eval "printf '%${GITSMART_ALIGNT}${GITSMART_MAX_WIDTH}s${GITSMART_COLSEP}%s\n' '${remote}' '${url}'"
}

# Runs the git fetch command, being particular about messaging.
callback_process_git_cmd_fetch () {
  local remote="$1"

  local cmd_resp
  local err_code

  # Print a "Fetching" message that we'll overwrite later.
  printf "Fetching ${remote}..."

  cmd_resp="$(git fetch "${remote}" 2>&1)"
  err_code=$?

  # Remove error lines associated with offline remote, because git
  # prints 5 lines for each offline remote, which the author finds
  # takes too much attention to process. It's quicker for the user
  # to parse a simple "‚úó" or "‚úì" to see if the fetch failed or not.
  cmd_resp="$(
    echo "${cmd_resp}" |
      grep -v \
        -e "^fatal: '.*' does not appear to be a git repository$" \
        -e "^fatal: Could not read from remote repository.$" \
        -e "^$" \
        -e "^Please make sure you have the correct access rights$" \
        -e "^and the repository exists.$"
  )"

  # Overwrite the "Fetching" message. Print command reponse,
  # if any, followed by command success (‚úì) or failure (‚úó).
  printf '\r'
  [ -n "${cmd_resp}" ] && echo "${cmd_resp}"
  [ ${err_code} -eq 0 ] && printf "‚úì " || printf "‚úó "
  # Add spaces to overwrite "Fetched " and "..." (minus new "‚úì ").
  printf "${remote}          "
  printf '\n'
}

remotes_process_and_pretty_print_tidy () {
  local git_cmd="$1"

  for remote in \
    'proving' \
    'release' \
    'starter' \
    'myclone' \
    'origin' \
    'upstream' \
    $(git remote \
      | grep -v \
        -e 'proving' \
        -e 'release' \
        -e 'starter' \
        -e 'myclone' \
        -e 'origin' \
        -e 'upstream' \
      | sort \
  ); do
    # Return if no URL recorded for remote.
    ! _gs_has_remote_cache ${remote} && continue

    if [ -z "${git_cmd}" ] || [ "${git_cmd}" = "pwd" ]; then
      # Print the remote name and remote URL.
      callback_print_remote_info "${remote}" "$(_gs_get_remote_cache "${remote}")"
    elif [ "${git_cmd}" = "fetch" ]; then
      # Run git-fetch on each remote.
      callback_process_git_cmd_fetch "${remote}"
    fi
  done
}

must_recognize_optional_remotes_command () {
  local git_cmd="$1"

  if [ -n "${git_cmd}" ] &&
      [ "${git_cmd}" != "fetch" ] &&
      [ "${git_cmd}" != "pwd" ] ; then
    >&2 echo "ERROR: Unrecognized git command: ‚Äú${git_cmd}‚Äù"
    exit 1
  fi
}

git_remotes_process () {
  local git_cmd="$1"

  must_recognize_optional_remotes_command "$@"
  git_remote_assemble_cache

  if [ "${git_cmd}" = "pwd" ]; then
    pwd
  fi

  remotes_process_and_pretty_print_tidy "$@"

  if [ "${git_cmd}" = "pwd" ]; then
    printf '\n'
  fi
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  reveal_biz_vars
  git_remotes_process "$@"
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "${@}"
fi

