#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-smart#ðŸ’¡
# License: MIT. Please find more in the LICENSE file.

# Opens project web page for remote based on tracking remote of current branch;
# or for remote deduced from conventional remote names hierarchy;
# or for specified remote.
# - Secret sauce: Opens PR page if branch name indicates PR # (per convention).

# USAGE: `git open [{remote}] [{PR-number}]`

# MAYBE: For handling Windows PowerShell, see this similar Git command:
#
#   https://github.com/tj/git-extras/blob/master/bin/git-browse

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

git_open () {
  local remote_or_pr_number="${1}"

  local pr_number="$(echo_number_or_empty_string "${remote_or_pr_number}")"
  local remote
  remote="$(remote_from_arg_or_deduce "${remote_or_pr_number}" "${pr_number}")" || exit $?
  [ -z "${pr_number}" ] && pr_number="${2}"
  [ -z "${pr_number}" ] && pr_number="$(git pr-number-from-branch-name)"

  local gh_url="$(prepare_github_url "${remote}" "${pr_number}")"

  sensible_browser "${gh_url}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# SYNC_ME: NOT_DRY: echo_number_or_empty_string

echo_number_or_empty_string () {
  local number_maybe="$1"

  local number_or_empty=""
  if true &&
    [ -n "${number_maybe}" ] &&
    echo "${number_maybe}" | grep -e '^[[:digit:]]\+$' > /dev/null;
  then
    number_or_empty="${number_maybe}"
  fi

  echo "${number_or_empty}"
}

remote_from_arg_or_deduce () {
  local remote_or_pr_number="$1"
  local pr_number="$2"

  local remote=""

  if [ -z "${pr_number}" ]; then
    # The first arg (possibly not specified) was not a PR number
    # (was not start a string of digits).
    remote="${remote_or_pr_number}"
  fi

  # No arguments specified; try to deduce the remote.
  remote="$(git lookup-remote "${remote}")" || return $?

  echo "${remote}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

prepare_github_url () {
  local remote="$1"
  local pr_number="$2"

  # Replace `-e` rules:
  # - For ~/.ssh/config SSH aliases, e.g.,
  #   git@github_username:username/project.git â†’ https://username/project
  # - For default SSH alias:
  #   ssh://git@github.com:username/project.git â†’ https://username/project
  #   git@github.com:username/project.git â†’ https://username/project
  #   git://github.com:username/project.git â†’ https://username/project
  #   ssh://github.com:username/project.git â†’ https://username/project
  local remote_url=$( \
    git remote get-url ${remote} \
    | sed -E \
      -e 's#git@github_[^:]+:#git@github.com:#' \
      -e 's#(ssh://git@|git@|git://|ssh://)#https://#' \
      -e 's#com:#com/#' \
      -e 's#\.git$##' \
    | head -n1 2> /dev/null \
  )

  # NOTE: GitHub redirects pull/ to issues/ if not such pr_number.
  # See also: `hub pr show 1234` will open browser, too,
  #            but requires GITHUB_TOKEN=XXXX be set.
  [ -n "${pr_number}" ] && remote_url="${remote_url}/pull/${pr_number}"

  echo  "${remote_url}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

sensible_browser () {
  local remote_url="$1"

  if ! os_is_macos; then
    sensible_browser_linux "${remote_url}"
  else
    sensible_browser_macos "${remote_url}"
  fi
}

sensible_browser_linux () {
  local remote_url="$1"

  # 2020-09-01: Default was to open in tab of existing window:
  #
  #   sensible-browser "${remote_url}" > /dev/null &
  #
  # but I find that a new window is generally what I want.
  #
  # - For one, new window will always show up in mate-panel at the
  #   end of the window list (predictably) rather than activating
  #   an existing mate-panel entry (at an unpredictable position).
  #
  # - For two, maybe your last used window has a ton of tabs open,
  #   and you had some specific tab active, and you don't want to
  #   lose your place by opening a new tab at the end of the list.

  # NOTE: See also the sensible-open command,
  #         https://github.com/landonb/sensible-open
  #       which we wouldn't need unless we wanted to
  #       support --incognito aka --private. (That is,
  #       the following --new-window argument is the
  #       same for both Chrome and Firefox.)

  # NOTE: - Using `&` to not block if browser not already running.
  #       - Using `>` to suppress "Opening in existing browser session."
  #       - Specify Default user profile so Chrome doesn't use last accessed.
  sensible-browser --new-window "${remote_url}" --profile-directory=Default > /dev/null &
}

sensible_browser_macos () {
  local remote_url="$1"

  # Open in tab of existing window:
  #   open "${remote_url}" > /dev/null &
  # Open in tab in new window (must specify application):
  #   open -na 'Google Chrome' --args --new-window "${remote_url}" > /dev/null &
  if type -t sensible-open > /dev/null; then
    # https://github.com/landonb/sh-sensible-open
    # MEH/2021-01-28: Include copy of sensible-open under (new) deps/.
    sensible-open "${remote_url}"
  else
    # Fallback to opening in tab of existing window.
    # - We could call the browser by name to pass it an arg, e.g.,
    #   `open -na 'Google Chrome' --args --new-window`, or
    #   `open -na 'Firefox' --args --new-window`. But I don't
    #   want to be explicit about the browser. Another option
    #   would be to add `sensible-open` under a new `deps/`
    #   directory and package with git-smart... but so far none
    #   of the git-smart/bin commands have any dependencies, and
    #   figuring that out seems messy (though maybe it's just a
    #   realpath away, "$(dirname -- "$(realpath -- "$0")")/../deps").
    #   In any case, a simple `open` is also fine.
    #   - If a user asks for the new-window feature,
    #     suggest installing sensible-open.
    open "${remote_url}" > /dev/null &
  fi
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# SYNC_ME: NOT_DRY: Common git-smart functions, in lieu of assuming
# they're defined in the current environment or wiring dependencies.

os_is_macos () {
  [ "$(uname)" = "Darwin" ]
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  git_open "$@"
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "${@}"
fi

