#!/usr/bin/env bash

git_abort () {
  local gitdir
  gitdir="$(git rev-parse --git-dir)" || exit

  local opfound=""
  local fcnt=""
  local plumbing_files=""

  local abortable_ops="cherry-pick merge rebase revert"

  local abortable_op
  for abortable_op in ${abortable_ops}; do
    local normalized
    normalized="$(printf "${abortable_op}" | tr '[:lower:]' '[:upper:]')"
    normalized="${normalized/-/_}"

    local plumbing_file="${gitdir}/${normalized}_HEAD"

    if [ -f "${plumbing_file}" ]; then
      fcnt="1${fcnt}"
      opfound="${abortable_op}"
      plumbing_files="${plumbing_files} ${plumbing_file}"
    fi
  done

  # FIXME/2023-01-09 11:31: How better to detect this?:
  # - If I `git ria! HEAD^` and try a squash, then rebase fails.
  #   But there's no REBASE_HEAD, just a `.git/rebase-merge` directory.
  #   - Why is it called `rebase-merge`? I.e., does git-merge use the
  #     same-named directory?
  if [ "${fcnt}" = "" ] && [ -d ".git/rebase-merge" ]; then
    opfound="rebase"
    fcnt=1
  fi

  if [ "${fcnt}" != "1" ]; then
    if [ "${fcnt}" = "" ]; then
      echo "(You're doing fine) Nothing to abort" >&2
    else
      echo "(Something stinks) More than one abortable operation detected:" >&2
      echo "${plumbing_files}" | xargs ls >&2
    fi

    exit 1
  fi

  git ${opfound} --abort
}

git_abort

