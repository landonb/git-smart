#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-smart#ðŸ’¡
# License: MIT. Please find more in the LICENSE file.

GITSMART_MYST_BRANCH_HIERARCHY="${GITSMART_MYST_BRANCH_HIERARCHY:-liminal proving release private main trunk develop}"

GITSMART_MYST_REMOTE_HIERARCHY="${GITSMART_MYST_REMOTE_HIERARCHY:-proving release starter myclone origin upstream}"

git_brs_filter_remotes () {
  local filter
  local remote
  for remote in ${GITSMART_MYST_REMOTE_HIERARCHY}; do
    filter="${filter}remotes/${remote}|"
  done
  filter="${filter}^..(?!remotes/)"
  echo "${filter}"
}

git-brs () {
  # GREP_COLORS default: ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36
  #                      and rv and ne absent.
  # GREP_COLOR is deprecated, kinda like mt, ms, and mc.

  # Select Graphic Rendition (SGR) readability helpers.
  sgr_norm () { printf '00'; }
  sgr_bold () { printf '01'; }

  fg_black () { printf '30'; }
  fg_red () { printf '31'; }
  fg_green () { printf '32'; }
  fg_yellow () { printf '33'; }
  fg_blue () { printf '34'; }
  fg_magenta () { printf '35'; }
  fg_cyan () { printf '36'; }
  fg_white () { printf '37'; }
  fg_darkgray () { printf '90'; }

  bg_black () { printf '40'; }
  bg_red () { printf '41'; }
  bg_green () { printf '42'; }
  bg_yellow () { printf '43'; }
  bg_blue () { printf '44'; }
  bg_magenta () { printf '45'; }
  bg_cyan () { printf '46'; }
  bg_white () { printf '47'; }

  # 2023-01-11: I don't prefer Homebrew grep because it's slow (at was when
  # I most recently onboarded an M1 Mac), so ensure calling GNU grep.
  # - Note this script uses Perl regex b/c (?!negative lookahead) [I assume],
  #   which BSD grep does not support.
  #   - I also tried perl directly, but probably did it wrong but don't want
  #     to rabbit-hole, but this did not work for me:
  #       echo ... | perl -ne 'print ${regex}'
  grep-or-ggrep () {
    #   $ grep --version
    #   grep (BSD grep, GNU compatible) 2.6.0-FreeBSD
    #   # "GNU compatible" it's not.
    #   $ ggrep --version
    #   ggrep (GNU grep) 3.8
    if grep -q -e "GNU grep" <(grep --version | head -1); then
      echo "grep"
    elif command -v ggrep > /dev/null; then
      echo "ggrep"
    else
      >&2 echo "ERROR: GNU \`grep\` not found"
    fi
  }

  local GREP="$(grep-or-ggrep)"

  printg () { echo "$1" | GREP_COLORS="mt=$2" ${GREP} --color=always -P "$3"; }

  # Use -a/--all to include remote-tracking branches. Add -v includes sha1 and
  # commit subject line, and relationship to upstream branch. Make double -vv
  # to also print the name of the upstream branch.
  # E.g.:
  #   $ git branch --all
  #   release
  #   $ git branch --all -v
  #   release        d2a885d [behind 67] Foo: bar.
  #   $ git branch --all -vv
  #   release        d2a885d [proving/release: behind 67] Foo: bar.

  local all_annotate="$(git --no-pager branch -avv)"
  local filter_remotes="$(git_brs_filter_remotes)"
  local important_brs="$(echo "${all_annotate}" | ${GREP} -P "${filter_remotes}")"

  local high="${important_brs}"
  # Start by matching everything.
  high="$(printg "${high}" "$(sgr_norm);$(fg_white)" '\[[^]]+\]|$')"

  # SHA column match (second column, after branch name, before HEAD message).
  high="$(printg "${high}" "$(sgr_bold);$(fg_black)" ' [a-f0-9]{8} |$')"
  # Branch name column match (first column).
  high="$(printg "${high}" "$(sgr_bold);$(fg_magenta)" '^. [^[:space:]]*|$')"
  # Feature branches.
  high="$(printg "${high}" "$(sgr_bold);$(fg_yellow)" '[[:space:]]+feature/([^] :])*|$')"
  # WIP branches.
  high="$(printg "${high}" "$(sgr_bold);$(fg_green)" '[[:space:]]+wip/([^] :])*|$')"
  # Alpha branches.
  # high="$(printg "${high}" "$(sgr_norm);$(bg_blue);$(fg_white)" '[[:space:]]+a(lpha)?[-0-9]+/?([^] :])*|$')"
  high="$(printg "${high}" "$(sgr_norm);$(bg_blue);$(fg_white)" '(?<=[[:space:]])a(lpha)?[-0-9]+/?([^] :])*|$')"

  # FIXME/2020-03-24: Add colors to GITSMART_MYST_REMOTE_HIERARCHY and iterate rather than hardcoding remotes.
  high="$(printg "${high}" "$(sgr_bold);$(fg_white);$(bg_cyan)" 'remotes/proving/([^] :])*|$')"
  high="$(printg "${high}" "$(sgr_bold);$(fg_black);$(bg_white)" 'remotes/release/([^] :])*|$')"
  high="$(printg "${high}" "$(sgr_bold);$(fg_white);$(bg_magenta)" 'remotes/starter/([^] :])*|$')"
  high="$(printg "${high}" "$(sgr_bold);$(fg_white);$(bg_yellow)" 'remotes/myclone/([^] :])*|$')"
  high="$(printg "${high}" "$(sgr_bold);$(fg_white);$(bg_cyan)" 'remotes/origin/([^] :])*|$')"
  high="$(printg "${high}" "$(sgr_bold);$(fg_black);$(bg_white)" 'remotes/upstream/([^] :])*|$')"

  local progenitor_filter
  for branch in ${GITSMART_MYST_BRANCH_HIERARCHY}; do
    progenitor_filter="${progenitor_filter}[[:space:]]+${branch}|"
  done
  progenitor_filter="${progenitor_filter}\$"
  # Now, e.g., progenitor_filter='[[:space:]]+proving|[[:space:]]+release|$'
  high="$(printg "${high}" "$(sgr_bold);$(fg_cyan)" "${progenitor_filter}")"

  echo "${high}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  git-brs
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "${@}"
fi

