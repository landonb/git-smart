#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-smart#💡
# License: MIT. Please find more in the LICENSE file.

# USAGE: Creates dated, orderly tag "breadcrumbs" so you never lose a line of work
#
# - Use case: You want to delete a WIP branch, but you don't want the
#   commits to ever disappear (be garbage collected). Drop a breadcrumb.
#
# - Use case: Or you're popping some commits to re-commit your work, or
#   you're rebasing, and you want an easy reference to your work from
#   the before times. Drop a breadcrumb.
#
# - For example, assume today is 2020 Feb 11, 06:40 am, and you're
#   working on a feature branch, you might crumb it like so:
#
#   $ git brs
#   * feature/XX-123/make-customer-happy
#     release
#
#   $ git --no-pager tag --list 🍞/feature/XX-123/*
#   🍞/feature/XX-123/make-customer-happy/01/191005_1750
#
#   $ git leave-breadcrumb
#   🍞/feature/XX-123/make-customer-happy/02/200211_0640
#
#   $ git --no-pager tag --list 🍞/feature/XX-123/*
#   🍞/feature/XX-123/make-customer-happy/01/191005_1750
#   🍞/feature/XX-123/make-customer-happy/02/200211_0640

# ***

# How wide to make the -XX counter.
_GS_PRECISION="2"

# Common tag prefix.
_GS_TAG_PREFIX="🍞/"

# Trace message switch.
DTRACE=false
# DEV/YOU: Uncomment to spit trace to stderr.
#  DTRACE=true

# ***

source_deps () {
  # Load: git_is_commit, git_tag_name_check_format.
  . "$(dirname "$(realpath "$0")")/../deps/sh-git-nubs/bin/git-nubs.sh"
}

# ***

git_leave_breadcrumb () {
  local dry=false
  if [ "$1" = "-v" ]; then
    dry=true

    shift
  fi

  local commit="${1:-HEAD}"

  # If user doesn't specify commit, we'll tag HEAD and use branch name
  # in tag name. If user specifies commit, we'll tag HEAD and still
  # use current branch name in tag, though it's likely meaningless
  # (though the author does this when they forgot to leave a bread-
  # crumb earlier, so generally the branch name would still be acc-
  # urate).
  local branch_name=$(git rev-parse --abbrev-ref=loose "${commit}")
  if [ -z "${branch_name}" ]; then
    branch_name=$(git rev-parse --abbrev-ref=loose "HEAD")
  fi

  local max_crumb_num=$( \
    git --no-pager tag --list "${_GS_TAG_PREFIX}${branch_name}/*" \
    | /usr/bin/env sed -E 's#^.*/0*([0-9]+)/[0-9a-zA-Z_-]+$#\1#' \
    | sort -n -r \
    | head -n1 \
  )

  if [ -z "${max_crumb_num}" ]; then
    max_crumb_num=0
  else
    # FIXME/2022-12-21 20:00: Move to sub fcn.
    local fmtd_prev_crumb_num
    fmtd_prev_crumb_num=$(printf "%0${_GS_PRECISION}d" "${max_crumb_num}")
    ${DTRACE} && >&2 echo "fmtd_prev_crumb_num=${fmtd_prev_crumb_num}"

    local latest_crumb_prefix
    latest_crumb_prefix="${_GS_TAG_PREFIX}${branch_name}/${fmtd_prev_crumb_num}"
    ${DTRACE} && >&2 echo "latest_crumb_prefix=${latest_crumb_prefix}"

    local latest_crumb_tag="$( \
      git --no-pager tag --list "${latest_crumb_prefix}/*" \
    )"
    ${DTRACE} && >&2 echo "latest_crumb_tag=${latest_crumb_tag}"

    if [ -n "${latest_crumb_tag}" ]; then
      local latest_crumb_id="$(git rev-parse "${latest_crumb_tag}")"
      ${DTRACE} && >&2 echo "latest_crumb_id=${latest_crumb_id}"

      local target_id="$(git rev-parse "${commit}")"
      ${DTRACE} && >&2 echo "target_id=${target_id}"

      if [ "${latest_crumb_id}" = "${target_id}" ]; then
        echo "already tagged!"

        return
      fi
    fi
  fi
  ${DTRACE} && >&2 echo "max_crumb_num=${max_crumb_num}"

  local next_crumb_num
  next_crumb_num=$((${max_crumb_num} + 1))
  ${DTRACE} && >&2 echo "next_crumb_num=${next_crumb_num}"

  local fmtd_crumb_num
  fmtd_crumb_num=$(printf "%0${_GS_PRECISION}d" "${next_crumb_num}")
  ${DTRACE} && >&2 echo "fmtd_crumb_num=${fmtd_crumb_num}"

  local next_crumb_num
  # next_crumb_num="wip/${fmtd_crumb_num}/$(date +%Y-%m-%d)"
  next_crumb_num="${_GS_TAG_PREFIX}${branch_name}/${fmtd_crumb_num}/$(date '+%y%m%d_%H%M')"

  if ${dry}; then
    # echo "git branch --track=inherit ${next_crumb_num}"
    echo "git tag \"${next_crumb_num}\" \"${commit}\""

    return
  fi

  # git branch --track=inherit "${next_crumb_num}"
  git tag "${next_crumb_num}" "${commit}"

  echo "${next_crumb_num}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  source_deps

  git_leave_breadcrumb "$@"
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "$@"
fi

