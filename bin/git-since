#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-smart#ðŸ’¡
# License: MIT. Please find more in the LICENSE file.

# Use `git since` to show changes since the last common ancestor
# between two branches, usually the current branch and the trunk.
# - If no branches are specified, finds the ancestor of the
#   upstream branch and the current branch.
#   - The upstream branch is assumed to be named 'release'.
#
#     - FIXME/2021-01-30: Ideally, this command would honor the
#       GITSMART_CORE_BRANCHES list that other commands use to
#       determine the trunk branch name.
#
# - If a single branch is specified, finds the ancestor of 'release'
#   and the named branch.
# - If two branches are specified, finds the ancestor of the two
#   named branches.
# - The command defaults to `git diff`, but `git log` can be specified
#   with `--log` or simply `-l`. Or if you'd like to see the changes in
#   tig, try `--tig` or `-t`.

# USAGE: git since [{upstream-ref}] [{feature-ref}] [command]`
#
# - Where command is one of: [--diff|-d|--log|-l|--tig|-t|--print]
#
# - E.g.: `git since upstream/develop -d`

# MAYBE/2020-07-01: Rather than assume "release" branch, iterate through a
# list of "core" branches, e.g., see git-cleanbr's ${GITSMART_CORE_BRANCHES},
# and identify the "progenitor" branch (see git-my-merge-status for meaning
# of progenitor branch). But I don't use this command often (at all), so do
# not really care. [2021-01-30: See also git-lookup-remote.]

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

git_since () {
  _git_since_command_parse_args "$@"

  local upstream_ref=${_GS_SINCE_REF_A:-release}

  local active_branch=$(git rev-parse --abbrev-ref HEAD)
  local feature_work=${_GS_SINCE_REF_B:-${active_branch}}

  if [ -z "${upstream_ref}" ] || [ "${upstream_ref}" = "${feature_work}" ]; then
    # Rather than compare against itself, compare against its remote counterpart.
    upstream_ref="$(git_tracking_branch)"
  fi

  if [ -z "${upstream_ref}" ]; then
    # Use the remote tracking branch remote, or deduce from conventional
    # hierarchy ('upstream', 'origin', 'github', etc.).
    local remote="$(git lookup-remote)"
    if [ -n "${remote}" ]; then
      upstream_ref="${remote}/${upstream_ref}"
    fi
  fi

  # SPIKE/2021-02-05: What happens on ambiguous ref?
  # - E.g., if 'release' branch and 'release' remote,
  #   which one does git-diff, git-log, and tig use?

  must_verify_ref "${upstream_ref}" "Upstream" || return $?
  must_verify_ref "${feature_work}" "Feature" || return $?

  local common_ancestor=$(git merge-base ${feature_work} ${upstream_ref})

  eval "${_GS_SINCE_COMMAND:-git diff} ${common_ancestor}..HEAD"
}

_git_since_command_parse_args () {
  _GS_SINCE_REF_A=""
  _GS_SINCE_REF_B=""
  _GS_SINCE_COMMAND=""

  while [ $# -gt 0 ]; do
    case $1 in
      -d | --diff)
        _GS_SINCE_COMMAND='git diff'

        shift
        ;;
      -l | --log)
        _GS_SINCE_COMMAND='git log'

        shift
        ;;
      -t | --tig)
        _GS_SINCE_COMMAND='tig'

        shift
        ;;
      -p | --print)
        
        _GS_SINCE_COMMAND='echo'
        shift
        ;;
      -h | --help)
        echo "USAGE: $0 [-d|--diff | -l|--log | -t|--tig| -p|--print] [<upstream-ref>] [<feature-ref>]"

        exit 0
        ;;
      --)
        shift

        break
        ;;
      *)
        _git_since_command_parse_ref_arg "$1"

        shift
        ;;
    esac
  done

  # In case short-circuited by '--', finish now.
  for ref_name in "$@"; do
    _git_since_command_parse_ref_arg "${ref_name}"
  done
}

_git_since_command_parse_ref_arg () {
  local ref_name="$1"

  if [ -z "${_GS_SINCE_REF_A}" ]; then
    _GS_SINCE_REF_A="${ref_name}"
  elif [ -z "${_GS_SINCE_REF_B}" ]; then
    _GS_SINCE_REF_B="${ref_name}"
  else
    >&2 echo "WARNING: Ignoring extra parameter: ${ref_name}"
  fi
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# 2021-02-05: I really don't remember why I was being so strict here...
# - Maybe it was just to indicate *which* object is invalid, i.e.,
#     git diff foo..bar
#   would produce the error:
#     fatal: ambiguous argument 'foo..bar':
#       unknown revision or path not in the working tree.
#   So at least this check lets us tell user which ref is invalid.

must_verify_ref () {
  local ref_name="$1"
  local friendly="$2"

  git_is_commit "${ref_name}" && return

  >&2 echo "ERROR: ${friendly} reference is not a commit: ${ref_name}"

  return 1
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

source_dep () {
  local dep_path="$(dirname "$(realpath "$0")")/../$1"

  ! . "${dep_path}" 2> /dev/null || return 0

  >&2 echo "ERROR: â€˜$(basename $0)â€™ failed to find or source: ${dep_path}"

  exit 1
}

main () {
  set -e
  source_dep "../deps/sh-git-nubs/bin/git-nubs.sh"

  git_since "$@"
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "${@}"
fi

