#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-smart#💡
# License: MIT. Please find more in the LICENSE file.

# Creates (if necessary, or just checks out) a branch to review someone's work (e.g., PR).

# USAGE: `git begin-review [{branch|PR-number}] [{remote}]`

# - Typically, you'll run `git begin-review 1234` to create a local branch
#   for another dev's branch that you want to review. Later, if that dev adds
#   to their branch, and if that earlier review branch is the current branch,
#   you can run `git begin-review` to create a new review branch for the same
#   PR (indicated by the current branch name), which might be helpful to diff
#   new changes against those you previously reviewed.
#
# - You can also (less commonly) create a review branch from a given branch
#   name, and this command will attempt to retrieve the PR number associated
#   with that branch (if there is just one, and not zero or two or more).

# ***

# CONVENTION: This is another of my (lb's) commands that follows some sort of
# broader 'git flow' or coventions I've adopted to make Git usage more fluid.
#
# - For example, if I pass this command the branch name 'feature-my-coworkers-work',
#   a new branch is created, named with a common prefix, as well as useful postfix
#   identifiers, e.g., 'review--my-coworkers-branch--author-YYYY-MM-DD-1'.
#
# - You can also pass a PR number, e.g., `git begin-review 123` might also
#   create a similarly named branch, but with the PR number encoded in it:
#     'review-123--my-coworkers-branch--author-YYYY-MM-DD-1'.
#
# - How does this help?
#
#   - If you use tab-complete, review branches won't tab-compete for tab-complete.
#     E.g., if I name my work starting with 'feature-', then when I type
#     `git br f<Tab>`, I'll only see my branches, and not any review branches.
#
#   - If you review someone's work, and then request changes, you can easily diff
#     the changes they eventually make. E.g.,:
#
#       git fetch {work-remote}
#
#       git review coworkers-branch
#       # Creates e.g., 'review-123--coworkers-branch--jdoe-2021-01-30-1'.
#
#       git open
#       # Update PR, request changes.
#
#       # Some time later.
#       git fetch {work-remote}
#       git review coworkers-branch
#       # Creates e.g., 'review-123--coworkers-branch--jdoe-2021-01-30-2'.
#
#       # List branches any copy the first review branch
#       git br
#       # And then diff to see that the request was honored.
#       # You can paste the branch, type dot-dot, paste again,
#       # and then backspace once and increment the review counter.
#       git diff <Ctrl-v>..<Ctrl-v><Backspace>2<CR>
#
#     MAYBE/2021-01-30: We could automate the diff using the latest
#                       BRANCH_COUNT and comparing against the one
#                       previous... but I'm not sure if it's worth
#                       the time to implement.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# YOU: Declare GITSMART_REVIEW_* environs if you want to customize branch name.

_GS_BR_REVIEW_PREFIX='review${PR_DELIM}${PR_NUMBER}--${BRANCH_NAME}--${AUTHOR}${AU_DELIM}'
_GS_BR_REVIEW_UNIQUE='${DATE_NOW}--${BRANCH_COUNT}'

# Such that review branch named '${GITSMART_REVIEW_PREFIX}${GITSMART_REVIEW_UNIQUE}'
GITSMART_REVIEW_PREFIX="${GITSMART_REVIEW_PREFIX:-${_GS_BR_REVIEW_PREFIX}}"
GITSMART_REVIEW_UNIQUE="${GITSMART_REVIEW_UNIQUE:-${_GS_BR_REVIEW_UNIQUE}}"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# 2021-01-30: (lb): Feeling lazy...
REVIEW_PR_NUM=""
REVIEW_REMOTE=""
REVIEW_BRANCH=""

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

git_begin_review () {
  git_begin_review_init_particulars "$@" || exit $?

  local review_branch="$(git_format_review_branch_name)"

  # echo "Creating review branch: ${review_branch}"

  git co -b "${review_branch}" "${REVIEW_REMOTE}/${REVIEW_BRANCH}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

git_begin_review_init_particulars () {
  local branch_or_pr_number="$1"
  local remote_or_empty="$2"

  if [ -z "${branch_or_pr_number}" ]; then
    # No arguments; try to get PR number from current branch name.
    REVIEW_PR_NUM="$(git pr-number-from-branch-name)"
  else
    REVIEW_PR_NUM="$(echo_number_or_empty_string "${branch_or_pr_number}")"
  fi

  if [ -z "${REVIEW_PR_NUM}" ] && [ -n "${branch_or_pr_number}" ]; then
    # Specified argument(s) should be specify branch (and maybe remote).
    # Or, single argument passed might specify both, e.g., remote/branch.
    local branch_after_remote=$( \
      echo "${branch_or_pr_number}" \
      | sed -E 's/[^\/]*\/(.*)/\1/'
    )
    if [ "${branch_after_remote}" != "${branch_or_pr_number}" ]; then
      REVIEW_REMOTE=$( \
        echo "${branch_or_pr_number}" \
        | sed -E 's/([^\/]*)\/.*/\1/'
      )
      if git_remote_exists "${REVIEW_REMOTE}"; then
        # Slash found in branch name, and name before slash is valid remote.
        REVIEW_BRANCH="${branch_after_remote}"
        # remote previously parsed and set.
      else
        # Slash in passed name, but not a recognized remote;
        # assumes slash happens to be in the branch name, and
        # uses remote (maybe) passes as second argument ($2).
        REVIEW_BRANCH="${branch_or_pr_number}"
        # Will set remote later.
      fi
    else
      # No slash in passed name, so maybe remote at second argument ($2).
      REVIEW_BRANCH="${branch_or_pr_number}"
      # Will set remote later.
    fi
  fi

  # ***

  if [ -z "${REVIEW_PR_NUM}" ] && [ -z "${REVIEW_BRANCH}" ]; then
    >&2 echo "USAGE: $(basename -- "$0") [{branch|PR-number}] [{remote}]"
    return 1
  fi

  # ***

  # (lb) I don't see a way to tell `hub` which remote to use, other than
  # it deducing it from the existing repo remotes, so we'll just deduce
  # the same, and hopefully our remotes align.
  if [ -z "${REVIEW_REMOTE}" ]; then
    REVIEW_REMOTE="$(git lookup-remote "${remote_or_empty}")" || return $?
  fi

  # ***

  if [ -n "${REVIEW_PR_NUM}" ]; then
    # Get branch from PR.
    must_define_hub || return $?
    must_define_token || return $?
    # Note: I checked the "official" `gh` command, but did not find
    # commands that I could use similar to what `hub` offers.
    local remote_colon_branch="$(hub pr show -f %H ${REVIEW_PR_NUM} 2> /dev/null)"

    if [ -z "${remote_colon_branch}" ]; then
      >&2 echo "ERROR: No branch found for PR number: ${REVIEW_PR_NUM}"
      >&2 echo "- Try: HUB_VERBOSE=1 hub pr show -f %H ${REVIEW_PR_NUM}"
      return 1
    fi

    if echo "${remote_colon_branch}" | grep -q -E ':'; then
      local parsed_remote

      parsed_remote=$(echo "${remote_colon_branch}" | sed -E 's/:.*$//')
      REVIEW_BRANCH=$(echo "${remote_colon_branch}" | sed -E 's/^.*://')

      if [ "${REVIEW_REMOTE}" != "${parsed_remote}" ]; then
        >&2 printf "WEIRD: Remote guessed “%s” but \`hub pr show\` says “%s”\n" \
          "${REVIEW_REMOTE}" \
          "${parsed_remote}"
      fi
      REVIEW_REMOTE="${parsed_remote}"
    else
      REVIEW_BRANCH="${remote_colon_branch}"
    fi

    if [ -z "${REVIEW_REMOTE}" ] || [ -z "${REVIEW_BRANCH}" ]; then
      >&2 echo "ERROR: Unexpected $(hub pr show -f %H ${REVIEW_PR_NUM}) response: ${remote_colon_branch}"
      return 1
    fi
  else
    # ${REVIEW_BRANCH} is set. Try to deduce PR number (okay if cannot).
    if type hub > /dev/null 2>&1 && [ -n "${GITHUB_TOKEN}" ] ; then
      # FIXME/2021-01-30: (lb): Does this work without remote specified?
      #                         Or any differently?
      #   local pr_numbers="$(hub pr list -f %I%n -b "${REVIEW_BRANCH}")"
      # NOTE: There's a similar pr-show that includes newline (%n) by default.
      # FIXME/2021-01-30: How does pr-show handle multiple matches?
      #   local pr_numbers="$(hub pr show -f %I -h "${remote}:${REVIEW_BRANCH}")"
      local pr_numbers="$(hub pr list -f %I%n -b "${REVIEW_REMOTE}:${REVIEW_BRANCH}")"
      if [ -n "${pr_numbers}" ]; then
        if [ $(echo "${pr_numbers}" | wc -l) -gt 1 ]; then
          # HINT: To help debug `hub`:
          #   HUB_VERBOSE=1 hub pr list -b "${REVIEW_REMOTE}:${REVIEW_BRANCH}" -f %I%
          >&2 hub pr list -b "${REVIEW_REMOTE}:${REVIEW_BRANCH}" -f %I%
          >&2 echo "hub pr list -b \"${REVIEW_REMOTE}:${REVIEW_BRANCH}\" -f %I%"
          >&2 echo "WARNING: Unknown PR number: Multiple matches found for ${REVIEW_BRANCH}."
        else
          REVIEW_PR_NUM="${pr_numbers}"
        fi
      fi
    fi
  fi

  # (lb): Kinda expected this to be necessary, but s'not:
  #
  #   export REVIEW_PR_NUM
  #   export REVIEW_REMOTE
  #   export REVIEW_BRANCH
}

git_format_review_branch_name () {

  # Refresh in case we need review branch to get author id.
  git fetch "${REVIEW_REMOTE}"

  # ***

  local branch_ref="${REVIEW_REMOTE}/${REVIEW_BRANCH}"

  # Prefer the author's GH logon, which will be the most consistent
  # identifier. Fallback to using the author email, for no particular
  # reason.
  local author=""

  if [ -n "${REVIEW_PR_NUM}" ]; then
    # %au is author (GitHub) login name.
    author="$(hub pr show -f %au ${REVIEW_PR_NUM})"
  fi

  if [ -z "${author}" ]; then
    # Note that the Git log is easily manipulated, so neither name nor
    # email will be as consistent as an author's GitHub login name.
    if ${GITSMART_REVIEW_FALLBACK_NAME:-false}; then
      # %ae is author email from commit.
      author="$(git --no-pager log -1 --pretty=format:'%ae' "${branch_ref}")"
      # Strip the @domain.
      author="$(echo "${author}" | sed -E 's/@.*//')"
    else
      # %an is author name from commit.
      author="$(git --no-pager log -1 --pretty=format:'%an' "${branch_ref}")"
      # This field is free-form, but let's try to normalize it a little, so that
      # double-clicking a branch name selects the whole branch name (i.e., let's
      # replace non-word characters).
      # - Normalize "Last, First" → "Last-First".
      # - Also replaces any sequence of spaces with a dash.
      author="$(echo "${author}" | sed 's/[,[:space:]]\+/-/')"
    fi
  fi

  # ***

  # Prepare format template variables.

  local PR_NUMBER=""
  [ -n "${REVIEW_PR_NUM}" ] && PR_NUMBER="${REVIEW_PR_NUM}" && PR_DELIM="-"

  local BRANCH_NAME="${REVIEW_BRANCH}"

  local AUTHOR=""
  [ -n "${author}" ] && AUTHOR="${author}" && AU_DELIM="--"

  local review_prefix="$(eval printf "${GITSMART_REVIEW_PREFIX}")"

  local sep="-"
  local DATE_NOW="$(date "+%Y${sep}%m${sep}%d")"

  # (lb): Making this somewhat complicated now...
  # Assumes the count component is always last.

  # Get list of branches with matching prefix;
  #   strip count, excluding leading 0's and --description-suffix;
  #   sort count numbers; and
  #   pick last number.
  # NOTE: The --description-suffix is a double-dash followed by
  #       any character combination excluding digits.
  # DEV: Uncomment for a little debug help:
  #   >&2 echo "review_prefix=${review_prefix}"
  #   >&2 echo "git rev-parse --abbrev-ref --branches="${review_prefix}*""
  local last_count=$(
    git rev-parse --abbrev-ref --branches="${review_prefix}*" \
      | sed -E 's/^.*\-\-[0]*([[:digit:]]+)(--[^0-9]*)?$/\1/' \
      | sort -n -r \
      | head -1
  )

  BRANCH_COUNT=1
  [ -n "${last_count}" ] && let 'BRANCH_COUNT = last_count + 1'
  BRANCH_COUNT="$(eval printf '%02d' "${BRANCH_COUNT}")"

  local review_unique="$(eval printf "${GITSMART_REVIEW_UNIQUE}")"

  echo "${review_prefix}${review_unique}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

must_define_hub () {
  type hub > /dev/null 2>&1 && return

  >&2 echo 'USAGE: Please install `hub` to get branch name from PR number.'

  return 1
}

must_define_token () {
  [ -n "${GITHUB_TOKEN}" ] && return

  >&2 echo 'USAGE: Please set the GITHUB_TOKEN for `hub`'
  >&2 echo "- If you need a token, visit:"
  >&2 echo
  >&2 echo "    https://github.com/settings/tokens"

  return 1
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# SYNC_ME: NOT_DRY: echo_number_or_empty_string

echo_number_or_empty_string () {
  local number_maybe="$1"

  local number_or_empty=""
  if true &&
    [ -n "${number_maybe}" ] &&
    echo "${number_maybe}" | grep -e '^[[:digit:]]\+$' > /dev/null;
  then
    number_or_empty="${number_maybe}"
  fi

  echo "${number_or_empty}"
}

git_branch_exists () {
  local branch_name="$1"

  git show-ref --verify --quiet refs/heads/${branch_name}
}

git_remote_exists () {
  local remote="$1"

  git remote get-url ${remote} &> /dev/null
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  git_begin_review "$@"
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "${@}"
fi

